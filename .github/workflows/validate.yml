name: Validate

on:
  push:
    branches: [main]
  pull_request:

jobs:
  validate-syntax:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Validate cask syntax
        run: |
          brew style Casks/jdk26ea.rb
          ruby -c Casks/jdk26ea.rb

      - name: Audit cask
        run: |
          brew audit --cask artagon/jdk26ea/jdk26ea

      - name: Validate formula syntax
        run: |
          brew style Formula/jdk26ea.rb
          ruby -c Formula/jdk26ea.rb

  test-install-macos:
    strategy:
      matrix:
        os: [macos-13, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Test cask installation
        run: |
          brew install --cask artagon/jdk26ea/jdk26ea

      - name: Verify installation
        run: |
          if [ -d "/Library/Java/JavaVirtualMachines/jdk-26-ea.jdk" ]; then
            echo "✅ JDK installed successfully"
            /Library/Java/JavaVirtualMachines/jdk-26-ea.jdk/Contents/Home/bin/java -version
          else
            echo "❌ JDK installation failed"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          brew uninstall --cask artagon/jdk26ea/jdk26ea || true

  test-install-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x64
          - os: ubuntu-24.04
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Display system info
        run: |
          echo "OS: $(uname -s)"
          echo "Arch: $(uname -m)"
          echo "Distribution: $(cat /etc/os-release | grep PRETTY_NAME)"

      - name: Test formula installation
        run: |
          brew install jdk26ea

      - name: Verify installation
        run: |
          JDK_PREFIX="$(brew --prefix jdk26ea)"
          if [ -d "$JDK_PREFIX" ]; then
            echo "✅ JDK installed successfully at $JDK_PREFIX"
            "$JDK_PREFIX/bin/java" -version
          else
            echo "❌ JDK installation failed"
            exit 1
          fi

      - name: Test JAVA_HOME setup
        run: |
          export JAVA_HOME="$(brew --prefix jdk26ea)"
          echo "JAVA_HOME=$JAVA_HOME"
          echo "Testing java compiler and runtime..."
          "$JAVA_HOME/bin/java" -version
          "$JAVA_HOME/bin/javac" -version

      - name: Test basic Java functionality
        run: |
          export JAVA_HOME="$(brew --prefix jdk26ea)"
          export PATH="$JAVA_HOME/bin:$PATH"

          # Create and compile a test program
          cat > HelloWorld.java << 'EOF'
          public class HelloWorld {
              public static void main(String[] args) {
                  System.out.println("JDK 26 EA is working!");
                  System.out.println("Java version: " + System.getProperty("java.version"));
              }
          }
          EOF

          javac HelloWorld.java
          java HelloWorld

      - name: Cleanup
        if: always()
        run: |
          brew uninstall --formula jdk26ea || true

  validate-expected:
    name: ValidateExpected
    runs-on: ubuntu-latest
    needs:
      - validate-syntax
      - test-install-macos
      - test-install-linux
    steps:
      - name: Confirm completion
        run: echo "All validation jobs completed successfully."

      - name: Update legacy commit status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA: ${{ github.sha }}
        run: |
          curl -sS \
               -X POST \
               -H "Authorization: Bearer ${GITHUB_TOKEN}" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/${REPO}/statuses/${SHA}" \
               -d '{"state":"success","context":"ValidateExpected","description":"All validation jobs completed successfully."}'
